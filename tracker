#!/usr/bin/env python3

from sys import argv
import csv
import re
from pathlib import Path

import config
import display

file_path = argv[0].split("//")[0]

arguments = {
    "total": {
        "switch": "--total",
        "flag": "t",
        "value": False
    },
    "help": {
        "switch": "--help",
        "flag": "h",
        "value": False
    }
}

def flatten_list(l):
    if l == []:
        return l
    if type(l[0]) == list:
        return flatten_list(l[0]) + flatten_list(l[1:])
    return l[:1] + flatten_list(l[1:])

def get_flags():
    flags = re.findall(r"\s(-[a-zA-Z]+)", " ".join(argv))
    for ind, flag in enumerate(flags):
        del(argv[argv.index(flag)])
        flags[ind] = list(flag[1:])
    return flatten_list(flags)

def get_switches():
    switches = re.findall(r"\s(--[a-zA-Z]+)", " ".join(argv))
    for ind, switch in enumerate(switches):
        del(argv[argv.index(switch)])
    return flatten_list(switches)

def process_all_args(arugments):
    flags = get_flags()
    switches = get_switches()
    for var, arg in arguments.items():
        if arg["flag"] in flags:
            arg["value"] = True
            del(flags[flags.index(arg["flag"])])
        if arg["switch"] in switches:
            arg["value"] = True
            del(switches[switches.index(arg["switch"])])
    return ["-" + flag for flag in flags] + switches

if __name__ == "__main__":

    unrecognised = process_all_args(arguments)
    if len(argv) > 2:
        unrecognised += argv[2:]

    if unrecognised:
        unrecognised = " ".join(unrecognised)
        print(f"tracker: unrecognised option(s) '{unrecognised}'")
        exit("Try 'tracker --help' for more information")

    task = argv[1] if len(argv) == 2 else config.default_task

    if arguments["help"]["value"]:
        with open(f"{file_path}/usage.txt", "r") as usage:
            print(usage.read())
        exit()

    if arguments["total"]["value"]:
        try:
            with open(f"{config.csv_path}/{task}.csv", "r") as csvfile:
                taskreader = csv.DictReader(csvfile)
                for row in taskreader:
                    last_task = row
                total = last_task["Total"]
                exit(f"Total time in {task}: {total}")
        except IOError:
            exit(f"Task not found: '{task}'")
            

    feeder = display.Feeder(task)
    feeder.run()
